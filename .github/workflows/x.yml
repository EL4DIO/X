name: Update Current Time and Earn Achievements

on:
  schedule:
    - cron: '*/10 * * * *'  # Runs every 10 minutes
  workflow_dispatch:  # Allows manual trigger for testing

jobs:
  update_time:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git configuration
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      # Step to get current time and create or update the file
      - name: Get current time
        run: |
          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "$CURRENT_TIME" >> time.txt
        continue-on-error: true  # Continue execution even if this step fails

      # Step to commit the updated time
      - name: Commit updated time
        run: |
          git add time.txt
          git commit -m "Update time to $CURRENT_TIME"
          git push https://github.com/${{ github.repository }}.git HEAD:main
        continue-on-error: true  # Continue execution even if this step fails

      # Quickdraw: Push multiple commits rapidly to earn the achievement
      - name: Push New Files for Quickdraw
        run: |
          for i in {1..5}; do
            TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
            echo "Quickdraw file created at $TIMESTAMP" > "quickdraw/quickdraw_$TIMESTAMP.txt"
            git add "quickdraw/quickdraw_$TIMESTAMP.txt"
            git commit -m "Quickdraw commit $TIMESTAMP"
            git push origin main
          done
        continue-on-error: true  # Continue execution even if this step fails

      # Fork Shark: Fork the repository (Simulating the achievement)
      - name: Fork the Repository
        run: |
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X POST https://api.github.com/repos/${{ github.repository }}/forks
        continue-on-error: true  # Continue execution even if this step fails


      # First Issue: Create an issue to simulate the first issue achievement
      - name: Create an Issue
        id: issue
        run: |
          response=$(curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X POST -H "Accept: application/vnd.github.v3+json" \
          -d '{"title":"Automated Issue","body":"This is an issue created by a GitHub action."}' \
          https://api.github.com/repos/${{ github.repository }}/issues)
          echo "response=$response"
          issue_number=$(echo $response | jq .number)
          echo "issue_number=$issue_number" >> $GITHUB_ENV
        

      # Solve the created issue (close the issue automatically)
      - name: Close the Created Issue
        run: |
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X PATCH -H "Accept: application/vnd.github.v3+json" \
          -d '{"state": "closed"}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ env.issue_number }}
        

      # First Commit: Create a new commit to simulate the first commit achievement
      - name: Make a First Commit
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          echo "First commit example $TIMESTAMP" > "first_commit_$TIMESTAMP.txt"
          git add "first_commit_$TIMESTAMP.txt"
          git commit -m "First commit example $TIMESTAMP"
          git push origin main
        continue-on-error: true  # Continue execution even if this step fails

      # Repository Contributor: Create an issue and a PR in the same repo
      - name: Create an Issue and PR (Repository Contributor)
        run: |
          # Create issue
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X POST -H "Accept: application/vnd.github.v3+json" \
          -d '{"title":"Automated Issue for Repo Contributor","body":"This is an issue created by a GitHub action."}' \
          https://api.github.com/repos/${{ github.repository }}/issues

          # Create PR
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X POST -H "Accept: application/vnd.github.v3+json" \
          -d '{"title":"Automated PR for Repo Contributor","body":"This PR contains automated changes to repo files.","head":"feature/update-repo-contributor","base":"main"}' \
          https://api.github.com/repos/${{ github.repository }}/pulls
        

      # Arctic Code Vault Contributor: Simulate archiving the repository
      - name: Archive Repository (Simulating Arctic Code Vault Contributor)
        run: |
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X PATCH -H "Accept: application/vnd.github.v3+json" \
          -d '{"archived":true}' \
          https://api.github.com/repos/${{ github.repository }}
        continue-on-error: true  # Continue execution even if this step fails

      # Committer: Make multiple commits rapidly to simulate the committer achievement
      - name: Multiple Commits for Committer Achievement
        run: |
          for i in {1..5}; do
            TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
            echo "Committer commit $TIMESTAMP" > "committer/committer_$TIMESTAMP.txt"
            git add "committer/committer_$TIMESTAMP.txt"
            git commit -m "Committer commit $TIMESTAMP"
            git push origin main
          done
        continue-on-error: true  # Continue execution even if this step fails

      # Code Review: Simulate code review by adding a comment to a pull request
      - name: Simulate Code Review
        run: |
          curl -u "github-actions:${{ secrets.GITHUB_TOKEN }}" \
          -X POST -H "Accept: application/vnd.github.v3+json" \
          -d '{"event":"COMMENT","body":"Looks good to me!","commit_id":"$GITHUB_SHA"}' \
          https://api.github.com/repos/${{ github.repository }}/pulls/1/reviews
        continue-on-error: true  # Continue execution even if this step fails
